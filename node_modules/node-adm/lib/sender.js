/*!
 * node-adm
 & Author: Anton Lopyrev (http://twitter.com/tokudu)
 * Copyright(c) 2014 SoThree,Inc <support@umanoapp.com>
 * Apache Licensed
 */
var Constants = require('./constants');

var request = require('request');

function Sender(options, clientID, clientSecret) {
  this.options = options || {};
  this.clientID = clientID;
  this.clientSecret = clientSecret;
  this.authenticationRetries = 0;
}

var authenticateMethod = Sender.prototype.authenticate = function (callback) {
  var self = this;

  if (!self.clientID) {
    return callback(new Error("Invalid client ID."));
  }
  if (!self.clientSecret) {
    return callback(new Error("Invalid client secret."));
  }

  var requestBody,
    post_options,
    post_req;

  requestBody =
    Constants.JSON_GRANT_TYPE + "=" + Constants.ADM_GRANT_TYPE + "&" +
    Constants.JSON_SCOPE + "=" + Constants.ADM_SCOPE + "&" +
    Constants.JSON_CLIENT_ID + "=" + self.clientID + "&" +
    Constants.JSON_CLIENT_SECRET + "=" + self.clientSecret;

  post_options = {
    url: Constants.ADM_OAUTH_ENDPOINT,
    port: '443',
    body: requestBody,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Content-length': Buffer.byteLength(requestBody, 'utf8')
    }
  };

  if (self.options.httpProxy) {
      post_options['proxy'] = self.options.httpProxy;
  }

  request.post(post_options, function(err, resp, body) {
        if (err) {
            console.log("Exception during ADM request: " + err);
            return callback(new Error("request error"));
        } else if (resp.statusCode === 503) {
            console.log('ADM service is unavailable');
            return callback(new Error("Unavailable"));
        } else if (resp.statusCode == 401){
            console.log('Unauthorized');
            return callback(new Error("Unauthorized"));
        } else if (resp.statusCode !== 200) {
            console.log('Invalid request: ' + resp.statusCode);
            return callback(new Error("Invalid request"));
        } else {
            body = JSON.parse(body);
            self.access_token = body.access_token;
            self.access_token_expiration_date = new Date(Date.now() + body.expires_in * 1000);
            console.log("Connected to ADM!");
            callback(null, self.access_token);
        }
  });
}

var sendMethod = Sender.prototype.send = function (message, registrationId, callback) {
  var self = this;
  var tryToReauthenticate = function() {
    self.authenticationRetries++;
    if (self.authenticationRetries < Constants.MAX_AUTHENTICATION_RETRIES) {
      // need to authenticate if there is no access token or it has expired
      self.authenticate(function(err) {
        if (err) return callback(err);
        // try to send again
        self.send(message, registrationId, callback);
      });
    } else {
      return callback(new Error("Sender authentication failed after max retries."));
    }
  }

  if (!this.access_token || (this.access_token_expiration_date < new Date())) {
    return tryToReauthenticate();
  }
  self.authenticationRetries = 0;

  if (!message || !message.data) {
    return callback(new Error("Invalid message."));
  }

  if (!registrationId) {
    return callback(new Error("Invalid registration ID."));
  }

  var requestBody,
    post_request_path,
    post_options,
    post_req;


  post_request_path = Constants.ADM_SEND_ENDPOINT.replace(Constants.PARAM_REGISTRATION_ID, registrationId);

  var requestBody = JSON.stringify(message);
  post_options = {
    url: post_request_path,
    port: '443',
    body: requestBody,
    headers: {
      'Content-Type': 'application/json',
      'Content-length': Buffer.byteLength(requestBody, 'utf8'),
      'X-Amzn-Type-Version': 'com.amazon.device.messaging.ADMMessage@1.0',
      'Accept': 'application/json',
      'X-Amzn-Accept-Type': 'com.amazon.device.messaging.ADMSendResult@1.0',
      'Authorization': 'Bearer ' + this.access_token
    }
  };

  if (self.options.httpProxy) {
      post_options['proxy'] = self.options.httpProxy;
  }

  request.post(post_options, function (err, resp, body) {
        if (err) {
            console.log("Exception during ADM request: " + err);
            return callback(new Error("request error"));
        } else if (resp.statusCode === 503) {
            console.log('ADM service is unavailable');
            return callback(new Error("Unavailable"));
        } else if (resp.statusCode == 401){
            console.log('Unauthorized');
            return callback(new Error("Unauthorized"));
        } else if (resp.statusCode !== 200) {
            console.log('Invalid request: ' + resp.statusCode);
            return callback(new Error("Invalid request"));
        } else {
            body = JSON.parse(body);
            if (!body.registrationID) {
                console.log('Missing registration ID');
                return callback(new Error("Invalid response from ADM"));
            }
            callback(null, body);
        }
  });
};

module.exports = Sender;
